{"version":3,"file":"static/js/859.3a0894da.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","App/App.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Form/Form.styled.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","views/ContactsView/ContactsView.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import styled from \"@emotion/styled\";\n\nexport const NameList = styled.ul`\nlist-style: square inside;\n\n\n`;\n\nexport const ListItem = styled.li`\ndisplay:flex;\njustify-content: space-between;\nwidth: 320px;\nfont-weight: 500;\n&:not(:last-child){\n    margin-bottom: 10px;\n}\n\n`;\nexport const DeleteButton = styled.button`\nbackground-color: #228B22;\ncursor: pointer;\nborder-radius: 4px;\n\n`","import React from 'react';\nimport { removeContacts } from 'redux/contacts/contactsOperations';\nimport * as contactsSelectors from 'redux/contacts/contactsSelectors';\nimport { selectFilter } from 'redux/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { NameList, ListItem, DeleteButton } from './ContactList.styled';\nexport const ContactList = () => {\n  const data = useSelector(contactsSelectors.selectContacts);\n  const filtered = useSelector(selectFilter);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filtered.toLowerCase();\n    if (!data) {\n      return;\n    }\n    return data.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContact = getVisibleContacts();\n\n  const dispatch = useDispatch();\n  return (\n    <NameList>\n      {data &&\n        filteredContact.map(({ id, name, phone }) => (\n          <ListItem key={id}>\n            {name}: {phone}\n            <DeleteButton\n              type=\"button\"\n              onClick={() => dispatch(removeContacts(id))}\n            >\n              Delete\n            </DeleteButton>\n          </ListItem>\n        ))}\n    </NameList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\ndisplay: flex;\nflex-direction: column;\nfont-weight: 500;\n\nmargin-left: 40px;\n\n`;\n\nexport const FilterInput = styled.input`\n\nwidth: 200px;\n`;","import React from 'react';\nimport { FilterLabel, FilterInput } from './Filter.styled';\nimport { filterContacts, selectFilter } from 'redux/filter/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nexport const Filter = () => {\n  const filtered = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase().trim()));\n    return;\n  };\n  return (\n    <FilterLabel>\n      Find contact by name\n      <FilterInput type=\"text\" value={filtered} onChange={changeFilter} />\n    </FilterLabel>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\npadding: 50px;\npadding-top: 10px;\nmargin:0 auto;\nmargin-top: 20px;\n\nwidth: 600px;\nbackground-color: #00FF7F;\n\n`","import styled from '@emotion/styled';\n\nexport const FeedbackTitle = styled.h2`\ndisplay:flex;\njustify-content: center; \n\nfont-size: 24px;\n\n\nmargin: 0;\nmargin-bottom: 32px;\n`;\n\nexport const SectionTitle = styled.section`\nmargin: 0;\nmargin-top: 20px;\npadding: 0;\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FeedbackTitle, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionTitle>\n      {title && <FeedbackTitle>{title}</FeedbackTitle>}\n      {children}\n    </SectionTitle>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const FormStyle = styled.form`\nmargin: 0;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\n\nbox-sizing: border-box;\nwidth: 500px;\nheight: 200px;\nborder: 5px solid #f44336;\npadding: 30px;\nmargin: 0 auto;\nbackground-color: #ffeb3b;\n\n`;\n\nexport const FormButton  = styled.button`\n\ndisplay: inline-block;\nmargin-top: 30px;\n\nwidth: 120px;\nheight: 30px;\n\nfont-size: 10px;\nfont-weight: 600;\ntext-transform: uppercase;\nborder:2px solid #FF4500;\nborder-radius: 4px;\nbox-shadow: -4px 3px 13px 1px rgba(0,0,0,0.75);\nbackground-color: #FA8072;\ncursor: pointer;\n\n&:hover,\n&focus{\n    transform: scale(0.9);\n}\n\n`;\n\nexport const InputLabel = styled.label`\ndisplay: flex;\njustify-content: space-between;\nfont-weight: 500;\nwidth: 260px;\n\n`;\n\nexport const FormInput = styled.input`\nmargin-left: 10px;\nmargin-bottom: 20px;\n\n`;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { FormStyle, InputLabel, FormInput, FormButton } from './Form.styled';\nimport * as contactsSelectors from 'redux/contacts/contactsSelectors';\nimport { addContacts } from 'redux/contacts/contactsOperations';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport function Form() {\n  const dispatch = useDispatch();\n\n  const data = useSelector(contactsSelectors.selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handelInputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handelOnSubmit = e => {\n    e.preventDefault();\n    reset();\n    const contactName = data.map(prevContact => prevContact.name);\n    if (contactName.includes(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    return dispatch(addContacts({ id: nanoid(), name, number }));\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <FormStyle onSubmit={handelOnSubmit}>\n      <InputLabel>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handelInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </InputLabel>\n      <InputLabel>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handelInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </InputLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </FormStyle>\n  );\n}\n","import { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { Container } from '../../App/App.styled';\nimport { Section } from '../../components/Section';\nimport { Form } from '../../components/Form';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport * as contactsSelectors from 'redux/contacts/contactsSelectors';\n\nfunction ContactsView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(contactsSelectors.selectIsLoading);\n  const error = useSelector(contactsSelectors.selectError);\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\n\nexport default ContactsView;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","NameList","styled","ListItem","DeleteButton","ContactList","data","useSelector","contactsSelectors","filtered","selectFilter","filteredContact","normalizedFilter","toLowerCase","filter","contact","name","includes","getVisibleContacts","dispatch","useDispatch","map","id","phone","type","onClick","removeContacts","FilterLabel","FilterInput","Filter","value","onChange","e","filterContacts","target","trim","Container","FeedbackTitle","SectionTitle","Section","title","children","FormStyle","FormButton","InputLabel","FormInput","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Form","useState","setName","number","setNumber","handelInputChange","reset","onSubmit","preventDefault","prevContact","addContacts","alert","pattern","required","useEffect","contactsOperations","fetchContacts"],"sourceRoot":""}